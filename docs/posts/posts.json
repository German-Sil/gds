[
  {
    "path": "posts/2022-03-12-principle-component-analysis/",
    "title": "Principle Component Analysis",
    "description": "A way of understanding variable relationships",
    "author": [
      {
        "name": "Germán Silva",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\r\nOverview\r\nSummary:\r\nThis report was done as part of UCSB’s ESM 244 Advanced Data Analysis and looks at miscellaneous environmental variables round the world at the country level from Zander Venter on Kaggle. I explore the relationships between some of these variables by using principle component analysis (PCA). Variables were selected the minimize the number of rows removed by NA deletion. Final selected variables include accessibility to cities, cropland cover, tree canopy cover, annual mean rainfall and temperature, and cloudiness. The relationships between these variables are interpreted from a biplot and screeplot created from the PCA results.\r\nData Source\r\nData compiled by Zander Venter (2018). “Environmental variables for world countries”. Accessed from: https://www.kaggle.com/zanderventer/environmental-variables-for-world-countries\r\nPrinciple Component Analysis\r\nSet up code:\r\n\r\n\r\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)\r\n\r\n## attach libraries\r\n\r\nlibrary(tidyverse)\r\nlibrary(here)\r\nlibrary(ggfortify)\r\n\r\n\r\n\r\nRead in the data:\r\n\r\n\r\n# Read in the data\r\nworld_env <- read_csv(here(\"data\", \"world_env_vars.csv\")) %>% # open csv\r\n  select(Country,\r\n         accessibility_to_cities, \r\n         cropland_cover, \r\n         tree_canopy_cover, \r\n         rain_mean_annual, \r\n         temp_mean_annual, \r\n         cloudiness) %>% # select the variables we want to explore\r\n  drop_na() # drops columns with NAs as PCA only works with numeric values\r\n\r\n\r\n\r\nPerform the PCA:\r\nPCA is easily performed in R with the prcomp() function. Scaling is performed to avoid any potential issues with comparisons between variables with different units. As PCA can only be done on numeric variables, the country names were removed for this step.\r\n\r\n\r\n# Performing the PCA\r\nworld_env_pca <- world_env %>% # pipe in the data\r\n  select(!Country) %>% # remove the country\r\n  prcomp(scale. = TRUE) # rescaling of data is performed\r\n\r\n\r\n\r\nCreate biplot and screeplot:\r\nA biplot is one way to interpret the results from a PCA. The arrows indicate the strength and correlation of the relationships of the variables to the principle components (PCs). The direction of the arrows relative to each other give a sense of their correlation or lack thereof in the axes determined by the different PCs.\r\n\r\n\r\n#Creating the biplot via autoplot()\r\n\r\nautoplot(world_env_pca, # pca data\r\n         data = world_env, # original data\r\n         loadings = TRUE, # show loadings\r\n         loadings.label = TRUE, # label loadings\r\n         loadings.colour = \"black\", # loading color\r\n         loadings.label.colour = \"black\", # loading label color\r\n         loadings.label.vjust = -.5) + # vertical justification\r\n  ggtitle(\"Principle Component 1 and 2 Biplot (SILVA)\") + # title\r\n  labs(x = \"Principle Component 1 (43.47%)\", \r\n       y= \"Principle Component 2 (23.42%)\")+ # axis labels \r\n   theme(plot.title = element_text(color = \"#5b4f41\", size = 16),\r\n            plot.background = element_rect(\"white\"),\r\n            panel.background = element_rect(\"#faf7f2\"),\r\n            panel.grid = element_line(linetype= \"longdash\",\r\n                                      color = \"#f0ece1\"),\r\n            axis.text = element_text(color = \"#5b4f41\"),\r\n            axis.title = element_text(color = \"#5b4f41\"),\r\n            strip.background = element_rect(\"white\"),\r\n            axis.line = element_line(color = \"#5b4f41\")) # change themes\r\n\r\n\r\n\r\n\r\nFigure 1: Biplot showing relationships between variables in PC1 and PC2. A few relationships between the variables stick out: 1) cloudiness, tree canopy cover, and mean annual rainfall seem to be positively correlated, 2) mean annual temperature and cropland are strongly negatively correlated with the angle between them being near 180o, 3) cropland cover and mean annual temp seem to have no to a weak correlation with cloudiness, tree canopy cover, and mean annual rainfall.\r\n\r\n\r\n\r\nScreeplots allow us to see how much of the variance in the data is explained by each of the PCs. Typically when ~80% of the variance is explained by the PCs is good.\r\n\r\n\r\n# Creating screeplot\r\nsd_vec <- world_env_pca$sdev # standard deviation\r\nvar_vec <- sd_vec^2 # variance\r\n\r\npc_names <- colnames(world_env_pca$rotation) # names of PCs\r\n\r\npct_expl_df <- data.frame(v = var_vec, # new data frame for screeplot; variance\r\n                          pct_v = var_vec / sum(var_vec), # percent of variance\r\n                          pc = fct_inorder(pc_names)) %>%  # orders rows\r\n  mutate(pct_label = paste0(round(pct_v * 100, 1), \"%\")) # adds character %\r\n\r\nggplot(pct_expl_df, aes(x = pc, y = v))+ # graphs via PC and variance\r\n  geom_col()+\r\n  geom_text(aes(label = pct_label), vjust = 0, nudge_y = 0.008)+\r\n  labs(x = \"Principle Components\",\r\n       y = \"Variances\") +\r\n  ggtitle(\"PCA Screeplot\")+\r\n  theme(plot.title = element_text(hjust = .5))\r\n\r\n\r\n\r\n\r\nFigure 2: Screeplot showing the amount of variance explained by each principle component.\r\n\r\n\r\n\r\nTakeaways:\r\nCloudiness, tree canopy cover, and mean annual rainfall have a positively correlated relationship with each other.\r\nThis makes conceptual sense as countries with more rain would have more cloudy days and likely be able to support more trees.\r\n\r\nMean annual temperature and cropland have a strong negatively correlated relationship with the angle between them being near 180o.\r\nWe might expect hotter countries (like Saudi Arabia) to have less arable land due to the extreme heat due to other environmental factors.\r\n\r\nCropland cover and mean annual temp seem to be not to weakly correlated with cloudiness, tree canopy cover, and mean annual rainfall.\r\nThe first two principle components account for 66.9% of the total variance in the data with over 80% being explained by the first three principle components.\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-03-12-principle-component-analysis/principle-component-analysis_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2024-10-29T12:49:51-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-03-12-salmon-time-series-analysis/",
    "title": "Salmon Time Series Analysis",
    "description": "Some examples of time series visualization and wrangling",
    "author": [
      {
        "name": "Germán Silva",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\r\n\r\n\r\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)\r\n\r\n# attach packages\r\nlibrary(tidyverse)\r\nlibrary(here)\r\nlibrary(lubridate)\r\nlibrary(tsibble)\r\nlibrary(feasts)\r\nlibrary(slider)\r\nlibrary(patchwork)\r\n\r\n\r\n\r\nOverview\r\nSummary:\r\nThis report was done as part of UCSB’s ESM 244 Advanced Data Analysis class and explores a subset of the adult fish passage data from the Willamette Falls fish ladder on the Willamette River (Oregon, USA) from 2001-01-01 to 2010-12-31. The analyses focus on three types of salmon: coho, jack coho, and steelhead. A variety of time series visualization and analysis techniques are highlighted. Analysis of the data includes 1) visualization of the original times series, 2) seasonplots for the data, and 3) annual counts by species.\r\nCaption: Salmon swimming up a fish ladder. Photo by John Trax/Alamy Stock PhotoData Source:\r\nColumbia River Research, “Data Access in Real Time (DART) Adult Passage Graphics and Text”, http://www.cbr.washington.edu/dart/query/adult_graph_text\r\n\r\n\r\n# opening the data and subsetting for salmon of interest and creating time series data\r\nadult_pass <- read_csv(here('data', 'willamette_fish_passage.csv')) %>% \r\n  janitor::clean_names() %>%  \r\n  select(date, coho, steelhead, jack_coho) %>% \r\n  mutate(date = mdy(date)) %>% \r\n  as_tsibble(key = NULL, index = date)\r\n\r\n# changing NA values to 0\r\nadult_pass[is.na(adult_pass)] = 0\r\n\r\n# reformating data frame into a long format for easy of use in plots\r\nadult_pass_long <- adult_pass %>% \r\n  pivot_longer(!date, names_to = \"species\", values_to = \"count\")\r\n\r\n\r\n\r\nOriginal Time Series\r\nTime series data can be visualized and interpreted in many different ways. The code below shows how you would create a simple plot of the original time series data and how you might compare the the data between multiple groups (in this case fish species).\r\n\r\n\r\n# create the three ggplots visualizing the three time series\r\n\r\nggplot(adult_pass, aes(x = date))+\r\n  geom_line(aes(y = coho, color = \"Coho\")) +\r\n  geom_line(aes(y = steelhead, color = \"Steelhead\")) +\r\n  geom_line(aes(y = jack_coho, color = \"Jack Coho\")) +\r\n  labs(x = \"Date\",\r\n       y = \"# of Adult Fish\",\r\n       color = \"Legend\")+\r\n  scale_color_manual(values = c(\"Coho\" = \"#ff8362\", \r\n                                \"Steelhead\" = \"#DEADA1\", \r\n                                \"Jack Coho\" = \"#6d748c\"))+\r\n  ggtitle(\"Adult Fish Counts by Species at Willamette Falls\")+\r\n  theme(plot.title = element_text(color = \"#5b4f41\", hjust = 0.5),\r\n            plot.background = element_rect(\"white\"),\r\n            panel.background = element_rect(\"#faf7f2\"),\r\n            panel.grid = element_line(linetype= \"longdash\", \r\n                                      color = \"#f0ece1\"),\r\n            axis.text = element_text(color = \"#5b4f41\"),\r\n            axis.title = element_text(color = \"#5b4f41\"),\r\n            strip.background = element_rect(\"white\"),\r\n            axis.line = element_line(color = \"#5b4f41\"))\r\n\r\n\r\n\r\n\r\nFigure 1: Plots showing the counts of the fish for each date. From each plot we can get a general sense of how the three fish differ in their seasonality.\r\n\r\n\r\n\r\nTakeaway Points:\r\nSteelhead numbers seem to spike at a different time of year than Coho and Jack Coho\r\nCoho and Jack Coho numbers are much more punctuated than the Steelhead numbers\r\nCoho numbers seem to be increasing over time\r\nSeasonplots\r\nSeasonplots are another way that you can interpret and analyze time series data. Seasonplots allow you to compare seasons (in this case years) to one another so you can get a sense as to how the data is changing from season to season and year to year. Here we use gg_season() and {patchwork} to make a comprehensive plot that shows how seasons change from year to year for each fish.\r\n\r\n\r\n# create a season plot for each species\r\ncoho_seaon <- adult_pass %>% \r\n  gg_season(y = coho) +\r\n  theme(plot.title = element_text(color = \"#5b4f41\", hjust = 0.5),\r\n            plot.background = element_rect(\"white\"),\r\n            panel.background = element_rect(\"#faf7f2\"),\r\n            panel.grid = element_line(linetype= \"longdash\", color = \"#f0ece1\"),\r\n            axis.text = element_text(color = \"#5b4f41\"),\r\n            axis.title = element_text(color = \"#5b4f41\"),\r\n            strip.background = element_rect(\"white\"),\r\n            axis.line = element_line(color = \"#5b4f41\"),\r\n            legend.position = \"none\")+\r\n  scale_colour_viridis_c(direction = -1) +\r\n  labs(x = \"Date\",\r\n       y = \"\")+\r\n  ggtitle(\"Coho\")\r\n\r\nsteelhead_season <- adult_pass %>% \r\n   gg_season(y = steelhead) +\r\n  theme(plot.title = element_text(color = \"#5b4f41\", hjust = 0.5),\r\n            plot.background = element_rect(\"white\"),\r\n            panel.background = element_rect(\"#faf7f2\"),\r\n            panel.grid = element_line(linetype= \"longdash\", color = \"#f0ece1\"),\r\n            axis.text = element_text(color = \"#5b4f41\"),\r\n            axis.title = element_text(color = \"#5b4f41\"),\r\n            strip.background = element_rect(\"white\"),\r\n            axis.line = element_line(color = \"#5b4f41\"),\r\n            legend.position = \"none\")+\r\n  scale_color_viridis_c(direction = -1)+\r\n  labs(x = \"Date\",\r\n       y =  \"\")+\r\n  ggtitle(\"Steelhead\")\r\n\r\njack_season <- adult_pass %>% \r\n   gg_season(y = jack_coho) +\r\n  theme(plot.title = element_text(color = \"#5b4f41\", hjust = 0.5),\r\n            plot.background = element_rect(\"white\"),\r\n            panel.background = element_rect(\"#faf7f2\"),\r\n            panel.grid = element_line(linetype= \"longdash\", color = \"#f0ece1\"),\r\n            axis.text = element_text(color = \"#5b4f41\"),\r\n            axis.title = element_text(color = \"#5b4f41\"),\r\n            strip.background = element_rect(\"white\"),\r\n            axis.line = element_line(color = \"#5b4f41\"))+\r\n  scale_color_viridis_c(direction = -1)+\r\n  labs(x = \"Date\",\r\n       y = \"# of Adult Fish\",\r\n       color = \"# of Season\")+\r\n  ggtitle(\"Jack Coho\")\r\n\r\npatchwork <- coho_seaon /jack_season / steelhead_season\r\n\r\npatchwork\r\n\r\n\r\n\r\n\r\nFigure 2: Season Plots for all ten years for each species of fish. Earlier seasons are colored in a light color and darker colors represent later seasons. Both types of Coho peak around October, while Steelhead peak around June.\r\n\r\n\r\n\r\nTakeaway Points:\r\nCoho and Jack Coho salmon have similar seasonality\r\nCoho and Jack Coho numbers seem to be on the rise as time goes on\r\nSteelhead numbers peak around April to July and don’t show as clear of an increase as Jack Coho and Coho\r\nAnnual counts by species\r\nLastly, time series can be compiled and wrangled to get different formats of datasets to visualize a variety of things (like annual counts). The tsibble data frame format makes this easy and allows us to index by year and group by species easily making it easy to compile a daily data set into a yearly data set that we can use to make comparisons of annual counts.\r\n\r\n\r\nadult_annual <- adult_pass_long %>% \r\n  index_by(year = ~year(.)) %>% \r\n  group_by(species, year) %>% \r\n  summarize(annual_sum = sum(count))\r\n\r\nspecies.labs <- c(\"coho\" = \"Coho\", \r\n                  \"jack_coho\" = \"Jack Coho\", \r\n                  \"steelhead\" = \"Steelhead\")\r\n\r\nggplot(adult_annual, aes(x = year, y = annual_sum, fill = species))+\r\n  geom_bar(stat = \"identity\")+\r\n  facet_wrap(~species, labeller = labeller(species = species.labs))+\r\n  scale_fill_manual(values = c(\"coho\" = \"#ff8362\", \r\n                               \"steelhead\" = \"#DEADA1\", \r\n                               \"jack_coho\" = \"#6d748c\"))+\r\n  ggtitle(\"Annual Adult Fish Counts by Species\")+\r\n  labs(x = \"Year\",\r\n       y = \"Annual Counts\",\r\n       fill = \"Species\")+\r\n  theme(plot.title = element_text(color = \"#5b4f41\", hjust = 0.5),\r\n            plot.background = element_rect(\"white\"),\r\n            panel.background = element_rect(\"#faf7f2\"),\r\n            panel.grid = element_line(linetype= \"longdash\", \r\n                                      color = \"#f0ece1\"),\r\n            axis.text = element_text(color = \"#5b4f41\"),\r\n            axis.title = element_text(color = \"#5b4f41\"),\r\n            strip.background = element_rect(\"white\"),\r\n        strip.text = element_text(color = \"#5b4f41\"),\r\n            axis.line = element_line(color = \"#5b4f41\"),\r\n        legend.position = \"none\")\r\n\r\n\r\n\r\n\r\nFigure 3: Bar plots showing total annual counts of adult fish by sepcies from 2000 to 2010. Steelhead have the largest number of individuals, which could be due to having a longer season than the other two species.\r\n\r\n\r\n\r\nTakeaway Points:\r\nJack Coho have the lowest annual counts out of the three species assessed\r\nAnnual Coho numbers seem to be on the rise between 2000 and 2010.\r\nDespite Coho having the largest peak on daily passages, as seen in Fig. 1, steelhead have the largest number of annual passings.\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-03-12-salmon-time-series-analysis/salmon-time-series-analysis_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2024-10-29T12:49:51-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-03-12-spatial-data-visualization-and-point-pattern-analysis/",
    "title": "Spatial Data Visualization and Point Pattern Analysis",
    "description": "Spatial data and knowing how to visualize and analyze it is an important skill in geography",
    "author": [
      {
        "name": "Germán Silva",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\r\nOverview\r\nSummary:\r\nThis entry highlight spatial data visualization done and point pattern analysis done as part of UCSB’s ESM 244. This code provides two examples of spatial data visualization for oil spill data in California and point pattern analysis to assess whether the spills are clustered or not. The exploratory data visualization is in an interactive format, while the choropleth map is a static map in a finalized format. Both highlight how the same data can be shown in different ways to visualize different aspects of the spatial data. For example, the full data set is likely useful for interactive exploration, but would make for a messy map if we were trying to convey counts in an easy to understand format. A choropleth makes the data easy to interpret, but obscures where exactly the events occurred.\r\nData Citation: CA Department of Fish and Wildlife, Office of Spill Prevention and Response, “Oil spill Incident Tracking [ds394],” https://gis.data.ca.gov/datasets/7464e3d6f4924b50ad06e5a553d71086_0/explore?showTable=true\r\n\r\n\r\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, results = FALSE)\r\n\r\n# attach libraries\r\nlibrary(spatstat)\r\nlibrary(tmap)\r\nlibrary(maptools)\r\nlibrary(sf)\r\nlibrary(tidyverse)\r\nlibrary(here)\r\n\r\n\r\n\r\nExploratory Map\r\nRead in the data\r\nWe read in the data for the oil spills and CA counties as simple features (or “sf”) using read_sf().\r\n\r\n\r\n# spill data\r\nspills <- read_sf(here('data', 'Oil_Spill_Incident_Tracking_[ds394]',\r\n                       \"Oil_Spill_Incident_Tracking_[ds394].shp\")) %>% \r\n  janitor::clean_names()\r\n\r\n# county shapefile\r\nca_counties <- read_sf(here('data', 'ca_counties', \r\n                            'CA_Counties_TIGER2016.shp')) %>% \r\n  janitor::clean_names()\r\n\r\n\r\n\r\nCreate interactive exploratory map\r\nWe need to first explore the data to get a sense of where things lie in geographic space and how we may want to analyse the data. Here we accomplish this through an interactive map.\r\n\r\n\r\n# interactive mode\r\ntmap_mode('view')\r\n\r\n# creation of exploratory map with both layers\r\ntm_shape(ca_counties)+\r\n  tm_fill(col = 'black', alpha = 0.3)+\r\n  tm_borders(col = 'black', lwd = 0.5)+\r\n  tm_shape(spills) +\r\n  tm_dots()\r\n\r\n\r\n\r\nCreation of visualization for 2008 Inland Spills by County\r\nSubset and join data\r\nsf objects can be used much like a data frame in R and this allows us to use typical data wrangling technqiues on them. Here we subset the oil spill point layer for events that occurred inland in 2007 and spatially join it with the CA counties layer.\r\n\r\n\r\n# subset of data\r\nspills_inland <- spills %>% \r\n  filter(inlandmari == \"Inland\") %>% \r\n  mutate(dateofinci = lubridate::ymd(dateofinci),\r\n         year = lubridate::year(dateofinci)) %>% \r\n  filter(year == 2008)\r\n\r\n# spatial joining\r\nca_spills <- ca_counties %>% \r\n  st_join(spills_inland)\r\n\r\n\r\n\r\nObtain the number of 2008 spills by county\r\nOnce the two layers are joined, we can use summarize() to obtain a count of the number of oil spills by county.\r\n\r\n\r\nca_spill_count <- ca_spills %>% \r\n  group_by(name) %>% \r\n  summarize(n_records = sum(!is.na(oesnumber)))\r\n\r\n\r\n\r\nCreate ggplot for visualization\r\nOnce we have the number of oil spills by county, we can create a choropleth that will visualize that data in an easy to interpret static map.\r\n\r\n\r\nggplot(ca_spill_count, aes(fill = n_records))+\r\n  geom_sf() +\r\n  scale_fill_viridis_c(option = \"A\",direction = -1)+\r\n  theme(plot.title = element_text(color = \"#5b4f41\", size = 16),\r\n            plot.background = element_rect(\"white\"),\r\n            panel.background = element_rect(\"#faf7f2\"),\r\n            panel.grid = element_line(linetype= \"longdash\", color = \"#f0ece1\"),\r\n            axis.text = element_text(color = \"#5b4f41\"),\r\n            axis.title = element_text(color = \"#5b4f41\"),\r\n            strip.background = element_rect(\"white\"),\r\n            axis.line = element_line(color = \"#5b4f41\"))+\r\n  labs(x = \"Latitude\",\r\n       y = \"Longitude\",\r\n       fill = \"# of Spills\")+\r\n  ggtitle(\"2008 California Oil Spills by County\")\r\n\r\n\r\n\r\n\r\nFigure 1: Map of California Counties colored according to the number of oil spills that occured in 2008. Lighter colors indicate fewer icidents than darker colors.\r\n\r\n\r\n\r\nPoint Pattern Analysis (G-function)\r\nWe can also perform point pattern analysis on the data to see understand more about the spatial distribution of the data. This can be done using a G-function to assess nearest neighbors between points.\r\n\r\n\r\nspills_sp <- as(spills, \"Spatial\")\r\nspills_ppp <- as(spills_sp, \"ppp\")\r\n\r\nca_sp <- as(ca_counties, \"Spatial\")\r\nca_win <- as(ca_sp, \"owin\")\r\n\r\nspills_full <- ppp(spills_ppp$x, spills_ppp$y, window = ca_win)\r\n\r\nr_vec <- seq(0, 25000, by = 100) # make a sequence of distances for G(r)\r\n\r\n\r\ngfunction <- envelope(spills_full, fun = Gest, r = r_vec, nsim = 10, nrank = 2)\r\n\r\ngfunction_long <- gfunction %>% \r\n  as.data.frame() %>% \r\n  pivot_longer(cols = obs:hi, names_to = \"model\", values_to = \"g_val\")\r\n\r\nggplot(gfunction_long, aes(x = r, y = g_val, group = model))+\r\n  geom_line(aes(color = model)) +\r\n  scale_color_manual(values = calecopal::cal_palette(name = \"sierra1\",\r\n                                                     n = 4, \r\n                                                     type = \"discrete\"))+\r\n  theme(plot.title = element_text(color = \"#5b4f41\", size = 16),\r\n            plot.background = element_rect(\"white\"),\r\n            panel.background = element_rect(\"#faf7f2\"),\r\n            panel.grid = element_line(linetype= \"longdash\", color = \"#f0ece1\"),\r\n            axis.text = element_text(color = \"#5b4f41\"),\r\n            axis.title = element_text(color = \"#5b4f41\"),\r\n            strip.background = element_rect(\"white\"),\r\n            axis.line = element_line(color = \"#5b4f41\"))+\r\n  labs(x = \"Distance\",\r\n       y = \"% of Point Pairs\",\r\n       color = \"Model\")+\r\n  ggtitle(\"Nearest Neighbor Point Pattern Analysis by G-Function\")\r\n\r\n\r\n\r\n\r\nFigure 2: A G-function plot used assess whether events are spatially random or not. As the G(r) values (% of Points pairs with a neighbor within the distance) are higher for the observed values than the model, we can conclude that CA oil spills are a clustered phenomena.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-03-12-spatial-data-visualization-and-point-pattern-analysis/spatial-data-visualization-and-point-pattern-analysis_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2024-10-29T12:49:51-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-02-20-welcome/",
    "title": "Data Visualization and T-tests",
    "description": "Exploring data and performing a type of hypothesis testing",
    "author": [
      {
        "name": "Germán Silva",
        "url": {}
      }
    ],
    "date": "2022-02-20",
    "categories": [],
    "contents": "\r\nOverview\r\nThis blog post highlights an example of code done for an assignment in ESM 206 at UCSB’s Bren School of Environmental Science and Managment. The task looks at data from the 2017 update by Lightwood, D. of the Jornada LTER lizard pitfall data from 1989 to 2006. The main question examined in the code is the differences in length (mm) between females of two lizard species: Cnemidophorus uniparens (Desert Grassland lizard) and Cnemidophorus tessalatus (Colorado Checkered lizard). Methods used to address this question include: exploratory data visualization, box and scatter plots, summary statistics, t-tests, and Cohen’s d, among other general data science practices. Each code chunk will be proceeded with explanations for the code.\r\nCode and Explanations\r\nThis is the set up chunk which allows for the setting of rendering options, such as the suppression of warnings and messages, but also for the attaching of packages that will be useful through out the task at hand.\r\n\r\n\r\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\r\n# attach packages\r\nlibrary(tidyverse)\r\nlibrary(here)\r\nlibrary(ggbeeswarm)\r\n\r\n\r\n\r\nBy using read_csv() we are able to open a .csv file into the code. The subsequent code allows us to clean and wrangle the data into a more manageable format and removes excess information that is not related to the task we are performing. In this case, I kept columns related to sex, species, and body length, and then filtered for rows that contained the individuals of the species and sex that were were comparing.\r\n\r\n\r\n# Creation of a stored object that includes a simplified version of the data\r\nlizards <- read_csv(here(\"_posts\", \"2022-02-20-welcome\",\"data\", \"lizards.csv\")) %>% # read in the data\r\n  select(spp, sex, total_length) %>% # \r\n  filter(sex == \"F\",\r\n         spp %in% c(\"CNUN\", \"CNTE\"))\r\n\r\n\r\n\r\nLooking at the Data\r\nData visualization is an important part of exploring your data so that you can see what the data looks like before making a decision on how to analyze it. This set of code makes a combined point and box plot as a way of showing data spread and data summary statistics. A similar plot can be achieved by making violin plots, but I find this way more visually appealing.\r\n\r\n\r\nggthemr::ggthemr('dust')\r\n\r\nggplot(lizards, aes(x=spp, y=total_length))+ # call data and mapping\r\n  geom_beeswarm(aes(fill=spp), shape= 21, color = \"brown\") + # add beeswarm plot\r\n  geom_boxplot(aes(fill=spp),\r\n               alpha=0.45,\r\n               width = 0.2,\r\n               outlier.color = NA) + # overlay boxplot\r\n  scale_fill_manual(values = calecopal::cal_palette(\"coastaldune1\",\r\n                                                     n= 2, \r\n                                                     type = \"discrete\"))+\r\n  scale_x_discrete(labels = c(\"Cnemidophorus tessalatus\", \r\n                              \"Cnemidophorus uniparens\")) + # x-axis tick labels\r\n  ggtitle(\"Total Length of Observed Female Lizards by Species\") + # title\r\n  theme(legend.position = \"none\") + # theme edits\r\n  labs(x= \"Species Name\",\r\n       y= \"Total Length (mm)\") # add labels for axes\r\n\r\n\r\n\r\n\r\nFigure 1: Boxplots and respective data point showing the total length for female lizards by respective species. Plots indicate that median female Cnemidophorus uniparens total length is less than the median female Cnemidophorus tessalatus length.\r\n\r\n\r\n\r\nOnce data has been visualized, it is important to obtain actual values for the summary statistics so you can talk in terms of actual numbers. This can often be achieved with the creation of a summary data frame and a table. The group_by() and summarise() functions are helpful in the creation of a summary data frame, with kable() being able to create a table from the resulting data frame.\r\n\r\n\r\n# Obtain summary stats\r\nlizards_summary <- lizards %>% \r\n  mutate(spp = case_when(\r\n    spp == \"CNTE\" ~ \"C. tessalatus\",\r\n    spp == \"CNUN\" ~ \"C. uniparens\"\r\n  )) %>% \r\n  group_by(spp) %>% \r\n  summarise(mean = mean(total_length, na.rm = TRUE),\r\n            sd = sd(total_length, na.rm = TRUE),\r\n            sample_size = n())\r\n# Convert into finalized table\r\nkableExtra::kable(lizards_summary,\r\n                  col.names = c(\"Species\", \r\n                                \"Mean Length (mm)\", \r\n                                \"Standard Deviation (mm)\", \r\n                                \"Sample Size\"),\r\n                  caption = \"Table 1 Summary Statistics for Female Lizards by Species\") %>% \r\n  kableExtra::kable_classic(full_width = FALSE)\r\n\r\n\r\n\r\nTable 1: Table 1 Summary Statistics for Female Lizards by Species\r\n\r\n\r\nSpecies\r\n\r\n\r\nMean Length (mm)\r\n\r\n\r\nStandard Deviation (mm)\r\n\r\n\r\nSample Size\r\n\r\n\r\nC. tessalatus\r\n\r\n\r\n244.8929\r\n\r\n\r\n47.32499\r\n\r\n\r\n28\r\n\r\n\r\nC. uniparens\r\n\r\n\r\n147.6000\r\n\r\n\r\n34.55341\r\n\r\n\r\n47\r\n\r\n\r\nHypothesis Testing\r\nQuestion:\r\nIs there a significant difference in total length difference in mean total length between female lizards for the two species?\r\nTo answer this question, with a parametric hypothesis test, we must first check for any violation of the assumptions for a t-test. This can be achieved with a histogram and a QQplot. The code below creates two simple versions of both plots to check for these violations.\r\n\r\n\r\n# Explore data to ensure that hypothesis testing can be done without violation of assumptions\r\nggplot(data = lizards, aes(x= total_length))+\r\n  geom_histogram()+ \r\n  facet_wrap(~spp)\r\n\r\n\r\n\r\nggplot(lizards, aes(sample=total_length))+\r\n  geom_qq()+\r\n  facet_wrap(~spp)\r\n\r\n\r\n\r\n\r\nBoth diagnostics are a bit concerning. Histograms seems to be somewhat close to normal, but QQ plots are a bit more concerning for assumptions of hypothesis testing. Law of large numbers would imply that means of samples would be normally distributed, both have moderately sized samples (n= 29 and 47 respectively). With Law of Large numbers, we can proceed with the t-test.\r\nTo perform a t-test, we need our data to be free of NA values. We first filter the data for the individuals from each respective group and remove the NA values. Two metrics are used to get an understanding of the differences between the two populations of lizards: Cohen’s d and t-test p-value. To get these metrics, I used effsize::cohen_d() and t.test().\r\n\r\n\r\n# Performing a t-test\r\ncnte <- lizards %>% \r\n  filter(spp == \"CNTE\") %>% \r\n  na.omit()\r\ncnun <- lizards %>% \r\n  filter(spp == \"CNUN\") %>% \r\n  na.omit()\r\ncohen_d <- effsize::cohen.d(cnte$total_length, cnun$total_length)\r\nt_test <- t.test(cnte$total_length, cnun$total_length)\r\n\r\n\r\n\r\nAnswer:\r\nWhile there may be potential violations of assumptions, hypothesis testing can be done under the assumption that the law of large numbers applies to this data sample. Hypothesis testing shows that the mean length difference of 97.29 mm is statistically significant (p-value = 3.75 * 10-12), with the p-value indicating that there is a 3.75 * 10-10 % chance that we would get sample means that were at least this different if the true means are the same, and a Cohen’s d (d = 2.42) indicating that there is a true and noticeable difference between the mean lengths of the two species.\r\nReferences:\r\nBui, An, Lowman, Heili, Guerra, Ana Sofia, and Miller-ter Kuile, Ana (2021). “calecopal: A California-inspired Package of Color Palettes.” R package version 0.1.0.\r\nClarke, Erik and Sherrill-Mix, Scott (2017). ggbeeswarm: Categorical Scatter (Violin Point) Plots. R package version 0.6.0. https://CRAN.R-project.org/package=ggbeeswarm\r\nLightfoot, D. (2017). Lizard pitfall trap data (LTER-II, LTER-III) ver 36. Environmental Data Initiative. https://doi.org/10.6073/pasta/ff37b4cace16a9943575f3fd7067064e\r\nMüller, Kirill (2020). “here: A Simpler Way to Find Your Files.” R package version 1.0.1. https://CRAN.R-project.org/package=here\r\nTorchiano M (2020). effsize: Efficient Effect Size Computation. doi: 10.5281/zenodo.1480624 (URL: https://doi.org/10.5281/zenodo.1480624), R package version 0.8.1, <URL: https://CRAN.R-project.org/package=effsize>.\r\nWickham et al., (2019). “Welcome to the tidyverse.” Journal of Open Source Software, 4(43), 1686, https://doi.org/10.21105/joss.01686\r\nZhu, Hao (2021). “kableExtra: Construct Complex Table with ‘kable’ and Pipe Syntax.” R package version 1.3.4. https://CRAN.R-project.org/package=kableExtra\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-02-20-welcome/welcome_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2024-10-29T10:27:51-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-01-18-welcome/",
    "title": "Let's Talk Reproducible Data Science",
    "description": "Learn about two tools to help you work with data in a more reproducible way",
    "author": [
      {
        "name": "Germán Silva",
        "url": {}
      }
    ],
    "date": "2022-02-02",
    "categories": [],
    "contents": "\r\nIntro\r\nI’m sure that if you are least somewhat familiar with coding then you have had to deal with the issue of having to navigate file paths and working directories. Maybe you have even had to work with someone’s code and had to update broken file paths or reset hard coded working directories? If that sounds like you, you might have thought to yourself, “F**k this! There must be a much easier way to deal with this stuff!”\r\nWell there is no need to swear anymore as there totally is a much easier way to do this and in a way that will be reproducible for others to do! Let me introduce you to two little things that will perhaps make your life much easier: the {here} package and Rprojects.\r\nSo what are {here} and Rprojects?\r\nSimply put they are a way to work within self-contained folders with relative file paths.\r\nYou see a R project is like making a partitioned folder that acts itself a bit like a working directory, with all subdirectories within the folder containing the .Rproj file also being connected to that directory. So if someone needs to work with your code and data, you would have a nice self contained folder that you can zip up and send to them and they would be able to work with it right away without having to reset working directories or figure out where all the data is all over again.\r\nHowever, what happens when you have a different operating system that your colleague? MACos and Windows use different notations for their filepaths and then what good would having a Rproject do for you?\r\nWell this is where using relative filepaths helps you out and {here} is well… here to help! You see {here} functions by assuming the place that your Rproject is at is the home directory and then merely looks for directories by name rather than by absolute paths. So instead of having to say read_csv(\"C:\\Users\\German\\Documents\\UCSB\\data\\example.csv\"), you would instead write read_csv(here(\"data\", \"example.csv\")), not only is it much less to write, but it ignores differences in filepath notation and allows for you to much more easily reproduce code and share it with others without having to worry about the differences in operating systems or filepath structures!\r\nI hope that this has been insightful and that you play with some more reproducible data science!\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-10-29T12:49:51-07:00",
    "input_file": {}
  }
]
